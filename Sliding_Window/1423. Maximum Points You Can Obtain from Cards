---------right ponter approch---------
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        l, r = 0, len(cardPoints) - k
        total = sum(cardPoints[r:])

        res = total

        while r < len(cardPoints):
            total += cardPoints[l] - cardPoints[r]
            res = max(res, total)
            r += 1
            l += 1
        return res

---------------middle window approch--------------


class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        n = len(cardPoints)

        # Step 1: Sum of all cards
        total = sum(cardPoints)

        # Step 2: If k == n, you take all cards
        if k == n:
            return total

        # Step 3: Window size for the "middle block" we leave
        window_size = n - k

        # Step 4: Initial sum of first middle block
        window_sum = sum(cardPoints[:window_size])
        min_window_sum = window_sum

        # Step 5: Slide the window across the array
        for i in range(window_size, n):
            window_sum += cardPoints[i] - cardPoints[i - window_size]
            min_window_sum = min(min_window_sum, window_sum)

        # Step 6: Subtract smallest middle block from total
        return total - min_window_sum
