class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        # A subarray is a contiguous portion of the original array in LC!

        n = len(nums)
        maxProd = nums[0] # not == zero because itll not consider the negative elements
        maxNow = nums[0]
        minNow = nums[0]
        
        # start from 1 as 0 is already used for initialization
        for i in range(1, n):
            # if ele is neg then multiplying it witht he prev largest ele will make it the smallest and vice-verca
            if nums[i] < 0:
                maxNow, minNow = minNow, maxNow

            maxNow = max(nums[i], nums[i]*maxNow)
            minNow = min(nums[i], nums[i]*minNow)

            maxProd = max(maxNow, maxProd)
        return maxProd
                
