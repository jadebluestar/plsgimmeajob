class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        n = len(nums)
        # if its less than 4 then can run teh problem only
        if n < 4:
            return []
        nums.sort()
        res = []
        

        for i in range(n - 3): # leave 3 more elements at the last for j, l, r
            if i > 0 and nums[i] == nums[i-1]:
                continue
            for j in range(i + 1, n - 2):
                if j > i + 1 and nums[j] == nums[j-1]:
                    continue 

                l = j + 1
                r = n -1

                while l < r :
                    cursum = nums[i] + nums[j] + nums[l] + nums[r]

                    if  cursum < target :
                        l += 1
                    elif cursum > target:
                        r -= 1
                    else:
                        res.append([nums[i], nums[j], nums[l], nums[r]])
                        # way to manage the duplicates
                        while l < r and nums[l] == nums[l+1]:
                            l += 1
                        while l < r and nums[r] == nums[r-1]:
                            r -= 1
                        # continue to move the pointers
                        l += 1
                        r -= 1
            
        return res


                


                
