---------------more optimized solution------------------------

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        last_seen = {}
        maxL = 0
        l = 0
       
        for r, ch in enumerate(s): # gives (index, char) every loop
            if ch in last_seen and last_seen[ch] >= l: # If itâ€™s less than l, that means it was far back, outside the window, so we can ignore it. it is also an index
                l = last_seen[ch] + 1
            last_seen[ch] = r
            
            maxL = max(maxL, r - l + 1)
        return maxL



----------------neetcode solution-----------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l = 0
        longest = 0
        sett = set()
        n = len(s)

        for r in range (n):
            while s[r] in sett:
                sett.remove(s[l])
                l += 1

            w = (r - l)+1
            longest = max(longest, w)
            sett.add(s[r])

        return longest
